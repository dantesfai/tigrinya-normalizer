Metadata-Version: 2.4
Name: tigrinya_normalizer
Version: 0.1.0
Summary: A Tigrinya text normalizer
Home-page: https://github.com/dantesfai/tigrinya_normalizer
Author: Daniel Tesfai
Author-email: d202361017@xs.ustb.edu.cn
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Natural Language :: Tigrinya
Classifier: Topic :: Text Processing :: Linguistic
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: regex
Requires-Dist: numpy
Requires-Dist: ujson
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-mock; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: pyfakefs; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Tigrinya Normalizer

A Python package and command-line tool for normalizing Tigrinya text.  
It applies linguistic rules, dictionary-based replacements, and cleaning steps to standardize Tigrinya text data.

---

## Features

- Normalize clitics and abbreviations  
- Handle hyphenated and slash-separated words  
- Remove unwanted punctuation and extra spaces  
- Customizable punctuation preservation  
- Load dictionaries for enhanced normalization  
- Command-line interface (CLI) for easy use  

---

## Installation

### Requirements

- Python 3.7+  
- See `requirements.txt` for dependencies

### Install from source

```bash
git clone https://github.com/yourusername/tigrinya-normalizer.git
cd tigrinya-normalizer
pip install .
```

### Or install dependencies manually:
```bash
pip install -r requirements.txt
```

## Usage
### As a Python package

```python
from tigrinya_normalizer.normalizer import TigrinyaNormalizer

normalizer = TigrinyaNormalizer(dataset_file="path/to/input.txt")

normalized_text = normalizer.normalize("ቛንቋ ትግርኛ")
print(normalized_text)
```
### As a CLI Tool

```bash
python cli.py -i path/to/input.txt -o normalized_output.txt
```

CLI Options:

| Argument               | Description                              | Default                 |
| ---------------------- | ---------------------------------------- | ----------------------- |
| `-i` / `--input`       | Path to input dataset file (required)    | -                       |
| `-o` / `--output`      | Output filename                          | `normalized_output.txt` |
| `-p` / `--punctuation` | Punctuation marks to preserve (optional) | None                    |


### Example: Preserve Punctuation

```bash
python cli.py -i input.txt -o output.txt -p "።፧?"
```

### Project Structure
```
tigrinya-normalizer/
├── tigrinya_normalizer/
│   ├── __init__.py
│   ├── normalizer.py          # Main normalization logic
│   ├── utils.py               # Utility functions
│   ├── dictionaries/          # Clitic/abbreviation mappings
│   └── data/
│       └── tigrinya_cleaned_sentences.txt
├── tests/
│   ├── __init__.py
│   ├── conftest.py
│   ├── test_unit_normalizer.py
│   ├── test_integration_normalizer.py
│   └── test_utils.py
├── cli.py                     # Command-line interface
├── requirements.txt           # Project dependencies
├── setup.py                   # Packaging configuration
└── README.md                  # Project documentation

```

### Dictionaries

The normalizer uses dictionaries located in the dictionaries/ folder for:

- Clitic replacements

- Hyphenated words

- Abbreviations

- Other language-specific mappings

You can extend or customize these dictionaries to improve normalization accuracy.

## Dictionary Generator

The `TiDictionary` class (in `tigrinya_normalizer/dictionary_generator.py`) can be used to generate Tigrinya-specific linguistic dictionaries from raw text input.

Example usage:

```python
from tigrinya_normalizer.dictionary_builder import TiDictionary

input_file = "data/output/Tigrinya_dataset.txt"
output_dir = "data/dictionary"

ti_dict = TiDictionary(input_file, output_dir)
ti_dict.create_dictionary("clitic_dict.txt", "words_with_fwd_slash.txt", "words_with_dots.txt")
ti_dict.create_improper_clitic()
ti_dict.write_clitic_dict(ti_dict.clitic_zipped_dict)
```

### CLI: Dictionary Generation

Run the dictionary generator via command line:

```bash
tigrinya-dictgen --input data/input.txt --output data/dictionary
```
Options:
```

- --clitic = Existing clitic dictionary file

- --slash = Existing fwd slash dictionary file

- --dots = Existing dot-based dictionary file
```

## Testing
You can run all tests using pytest from the root directory:

```bash
pytest tests/
```
Or Simply 

```bash
pytest
```
<code>pytest</code> will discover the tests in the tests/ folder automatically.

### Example conftest.py

If you want to share fixtures or setup/teardown logic between your test files, place them in tests/conftest.py. For example:

```python
import pytest
from tigrinya_normalizer.normalizer import TigrinyaNormalizer

@pytest.fixture
def sample_normalizer():
    return TigrinyaNormalizer(dataset_file="tests/sample_data.txt")

```
** Test File Naming Convention **

- test_unit_*.py — for unit tests of individual methods/classes

- test_integration_*.py — for integration tests involving multiple components

- test_utils.py — for utility functions

## Contributing

Contributions are welcome! Please open issues or pull requests for improvements or bug fixes.

## License
MIT License. See LICENSE for details.

## Contact

Daniel Tesfai d202361017@xs.ustb.edu.cn
Project Link: https://github.com/dantesfai/tigrinya-normalizer
